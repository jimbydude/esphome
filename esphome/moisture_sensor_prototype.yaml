substitutions:
  device: moisture_sensor_prototype
  name: Moisture Sensor Prototype
  location: Test
  reboot_timeout: 1h
  update_interval: 10min
  update_interval_short: 10s
  sliding_window: "15"
  i2c_sda: D2
  i2c_scl: D1
  i2c_scan: 'True'
  i2c_device: ads115_a
  ads_address: '0x48'
  adc_icon: "mdi:water-percent"
  adc_accuracy_decimals: '1'
  adc_unit_of_measurement: "%"
  adc_gain: '2.048'
  # LED Values
  led_max_bright: '0.5'

esphome:
  name: ${device}
  platform: ESP8266
  board: d1_mini


<<: !include common/common.yaml
<<: !include common/logger.yaml
<<: !include common/binary_sensors.yaml
<<: !include common/switches.yaml

#
# I2C Iniitalisation
#
<<: !include common/i2c.yaml
<<: !include common/analog_sensor/ads1115.yaml
    
globals:
   - id: led_max_brightness
     type: float
     restore_value: no
     initial_value: '0.5'

#########################
# ADC A0: Moisture Sensor Globals
#########################
   # Voltage at which the sensor is reading not connected
   - id: adc_nc_value
     type: float
     restore_value: no
     initial_value: '0.05'

   # This is the adc off. It's the value in satuated soil 
   - id: adc_soil_saturated
     type: float
     restore_value: no
     initial_value: '0.70'

   # Max voltage (including multiplier). The highter the drier
   - id: adc_soil_dry
     type: float
     restore_value: no
     initial_value: '2.3'

   # ADC Connected
   - id: adc_a0_connected
     type: bool
     restore_value: no
     initial_value: 'false'

#########################
# ADC ADS1115: Moisture Sensor Globals
#########################
   # Voltage at which the sensor is reading not connected
   - id: ads1115_nc_value
     type: float
     restore_value: no
     initial_value: '0.5'

   # This is the adc off. It's the value in satuated soil 
   - id: ads1115_soil_saturated
     type: float
     restore_value: no
     initial_value: '1.0'

   # Max voltage (including multiplier). The highter the drier
   - id: ads1115_soil_dry
     type: float
     restore_value: no
     initial_value: '2.04'

   # ADC Connected
   - id: adc_va0_connected
     type: bool
     restore_value: no
     initial_value: 'false'
   - id: adc_va1_connected
     type: bool
     restore_value: no
     initial_value: 'false'
   - id: adc_va2_connected
     type: bool
     restore_value: no
     initial_value: 'false'
   - id: adc_va3_connected
     type: bool
     restore_value: no
     initial_value: 'false'
     
# Lowest Percentage, below this and soil is too dry
   - id: danger_threshold
     type: float
     restore_value: no
     initial_value: '30.0'
# END GLOBALS

#################################################################
# Various Sensor Config
#################################################################

#################################################################
# Sensor Configuration
#################################################################

sensor:
  - !include common/sensor/wifi-signal.yaml
  - !include common/sensor/uptime.yaml
  - !include common/sensor/dht11.yaml
  # Soil Sensore on Analog Pin A0
  - !include common/adc_a0_moisture.yaml

### END OF SENSOR CONFIG BLOCK

################################################################
# ADS1115 Analog multiplexer.
################################################################
# Virtual A0
  - !include common/ads1115_a0_moisture.yaml
  - !include common/ads1115_a1_moisture.yaml
  - !include common/ads1115_a2_moisture.yaml
  # - !include common/ads1115_a3_moisture.yaml

### END OF ADS115 BLOCK

#################################################################
# GRB WS2812B LED lights. PIN D5
#################################################################
light:
  - platform: fastled_clockless
    chipset: WS2812B
    pin: D5
    num_leds: 6
    rgb_order: GRB
    name: "FastLED WS2812B Light"
    id: led_strip
# Soil Sensor on ESP A0
  - platform: partition
    name: "A0 Led"
    id: a0_status_led
    effects:
      - !include common/effect/strobe_danger.yaml
    segments:
      - id: led_strip
        from: 0
        to: 0
# Soil Sensor on AD1115 A0-GND
  - platform: partition
    name: "VA0 Led"
    id: va0_status_led
    effects:
      - !include common/effect/strobe_danger.yaml
    segments:
      - id: led_strip
        from: 1
        to: 1
# Soil Sensor on AD1115 A1-GND
  - platform: partition
    name: "VA1 Led"
    id: va1_status_led
    effects:
      - !include common/effect/strobe_danger.yaml
    segments:
      - id: led_strip
        from: 2
        to: 2
# Soil Sensor on AD1115 A2-GND
  - platform: partition
    name: "VA2 Led"
    id: va2_status_led
    effects:
      - !include common/effect/strobe_danger.yaml
    segments:
      - id: led_strip
        from: 3
        to: 3
# Soil Sensor on AD1115 A3-GND
  - platform: partition
    name: "VA3 Led"
    id: va3_status_led
    effects:
      - !include common/effect/strobe_danger.yaml
    segments:
      - id: led_strip
        from: 4
        to: 4
# Status LED
  - platform: partition
    name: "led6"
    id: status_led
    effects:
      - !include common/effect/strobe_wifi_connecting.yaml
    segments:
      - id: led_strip
        from: 5
        to: 5
### END OF LED LIGHT (WS2812B) BLOCK

#################################################################
# Misc setup
#################################################################
switch:
  - !include common/switch/restart.yaml

#################################################################
# List of fonts we are using for the OLED Display.
#################################################################
font:
  - file: 'ttf/arial.ttf'
    id: font_arial
    size: 10
  - file: 'ttf/times.ttf'
    id: font_times
    size: 16
  - file: 'ttf/MiriamMonoCLM-Bold.ttf'
    id: font_miriam
    size: 24
    
#################################################################
# OLED Display Configuration
#################################################################
# Cycle through pages on a timer
# interval:
#   - interval: 5s
#     then:
#       - display.page.show_next: oled_display
#       - component.update: oled_display

# Setup Display to show sensor reading in real time.
display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    reset_pin: D0
    address: 0x3C
    id: oled_display
    
    pages:
      - id: page1
        lambda: |-
          static int num_sensors = 5;
          static int disp_width = it.get_width();
          static int disp_height = it.get_height();
          static int badge_center = disp_width/(num_sensors*2);
          static int badge_width = badge_center*2;
          static int badge_padding = 2;
          static int badge_radius = badge_center - badge_padding;
          static int badge_y_offset = 53;
          static int badge_x_offset = 4;
          static int badge_name_pos = badge_y_offset - badge_radius - 6;
          static int info_line_y = 22;
          static int wifi_x = 1;
          static int temp_x = wifi_x + 60;
          static int hum_x = temp_x + 30;

          it.print(0, 0, id(font_times), "Rosies Planter Box");
          // Display Wifi, temp and humidity here and the a line.
          it.printf(wifi_x, info_line_y, id(font_arial), "Wifi: %2.0fdb", id(${device}_wifi_signal).state);
          it.printf(temp_x, info_line_y, id(font_arial), "T: %2.0ff", id(${device}_dht11_temp).state);
          it.printf(hum_x, info_line_y, id(font_arial), "H:%2.0f%%", id(${device}_dht11_hum).state);

          // Display each sensor in it's own little circle
          // Separate with a nice line
          it.line(0, info_line_y + 10, disp_width, info_line_y +10);

          int i = 0;
          char str[10];
          sprintf( str, "%2.0f", id( ${device}_a0 ).state);
          it.circle(badge_center + (badge_width * i), badge_y_offset, badge_radius);
          it.printf(badge_center + (badge_width * i), badge_name_pos, id(font_arial), TextAlign::CENTER, "S%d", i + 1);
          it.printf(badge_center + (badge_width * i), badge_y_offset, id(font_arial), TextAlign::CENTER, "%s", id(adc_a0_connected) == false ? "Off": str);
          i++;
          sprintf( str, "%2.0f", id( ${device}_va0 ).state);
          it.circle(badge_center + (badge_width * i), badge_y_offset, badge_radius);
          it.printf(badge_center + (badge_width * i), badge_name_pos, id(font_arial), TextAlign::CENTER, "S%d", i + 1);
          it.printf(badge_center + (badge_width * i), badge_y_offset, id(font_arial), TextAlign::CENTER, "%s", id(adc_va0_connected) == false ? "Off": str);
          i++;
          sprintf( str, "%2.0f", id( ${device}_va1 ).state);
          it.circle(badge_center + (badge_width * i), badge_y_offset, badge_radius);
          it.printf(badge_center + (badge_width * i), badge_name_pos, id(font_arial), TextAlign::CENTER, "S%d", i + 1);
          it.printf(badge_center + (badge_width * i), badge_y_offset, id(font_arial), TextAlign::CENTER, "%s", id(adc_va1_connected) == false ? "Off": str);
          i++;
          sprintf( str, "%2.0f", id( ${device}_va2 ).state);
          it.circle(badge_center + (badge_width * i), badge_y_offset, badge_radius);
          it.printf(badge_center + (badge_width * i), badge_name_pos, id(font_arial), TextAlign::CENTER, "S%d", i + 1);
          it.printf(badge_center + (badge_width * i), badge_y_offset, id(font_arial), TextAlign::CENTER, "%s", id(adc_va2_connected) == false ? "Off": str);
          i++;
      - id: page2
        lambda: |-
          it.print(0, 0, id(font_times), "Rosies Planter Box");
          
          // Print time in HH:MM format
          it.strftime(0, 16, id(font_miriam), TextAlign::TOP_LEFT, "%l:%M  %P", id(esptime).now());
#      - id: page3
#        lambda: |-
#          it.printf(0, 10, id(font_arial), "Sun: %s", id(sun).state.c_str());
#          // it.printf(0, 16, id(font_arial), "Elev: %s", id(sun).sunset());
